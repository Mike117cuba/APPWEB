#############################################################################
#############################################################################
#############################################################################



# Rutas
@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        users = mongo.db.users
        login_user = users.find_one({'name': request.form['username']})

        # Si el usuario no existe, verifica si es el usuario por defecto
        if not login_user and request.form['username'] == DEFAULT_USERNAME:
            hashed_pass = bcrypt.generate_password_hash(DEFAULT_PASSWORD).decode('utf-8')
            users.insert_one({'name': DEFAULT_USERNAME, 'password': hashed_pass})
            login_user = {'name': DEFAULT_USERNAME, 'password': hashed_pass}  # Recrea el objeto login_user para la verificación posterior

        # Verifica la contraseña solo si login_user existe
        if login_user:
            if bcrypt.check_password_hash(login_user['password'], request.form['pass']):
                # session['username'] = request.form['username']  # Descomentar si vas a usar sesiones
                return redirect(url_for('index'))  # Asegúrate de tener una ruta 'index' definida en tu aplicación
            else:
                # Contraseña incorrecta
                flash('Contraseña incorrecta', 'error')  # 'error' es una categoría para el mensaje
        else:
            # Usuario no existe
            flash('El usuario no existe', 'error')  # 'error' es una categoría para el mensaje
        return redirect(url_for('login'))

    # Método GET o autenticación fallida
    resp = make_response(render_template('login.html'))
    resp.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    resp.headers['Pragma'] = 'no-cache'
    resp.headers['Expires'] = '0'
    return resp  



@app.route('/MO')
def index():
    return render_template('MO.html')

@app.route('/recuperar_contraseña')
def forgot_password():
    # Aquí implementarás la lógica de recuperación de contraseña más adelante
    return 'Forgot password'

@app.route('/crear_cuenta')
def create_account():
    # Aquí implementarás la lógica de creación de cuenta más adelante
    return 'Create account'






@app.route("/submit_data", methods=["POST"])
def submit_data():
    # Recibir datos de temperatura desde la Raspberry Pi como una lista
    temperature_list = request.form.getlist("temperature")  # Obtener una lista de temperaturas

    # Obtener la hora actual en formato hora:minutos:segundos
    local_tz = pytz.timezone('America/Mexico_City')  # Usa tu zona horaria
    local_time = datetime.now(local_tz).strftime("%H:%M:%S")

    # Definir la estructura de la base de datos
    data_entry = {
        "time": local_time,
        "setpoint": current_setpoint  # Como current_setpoint siempre tiene un valor, lo añadimos directamente
    }

    # Lista para almacenar datos que se escribirán en el archivo txt
    data_for_txt = []

    # Agregar los valores de temperatura a la estructura de datos
    for i in range(7):
        sensor_key = f"sensor{i+1}"  # Crear claves de "sensor1" a "sensor7"
        if i < len(temperature_list):
            temperature_value = float(temperature_list[i])
            data_entry[sensor_key] = temperature_value
            data_for_txt.append(str(temperature_value))
        else:
            # Si no se proporciona un valor para el sensor, establecerlo en 0
            data_entry[sensor_key] = 0.0
            data_for_txt.append("0.0")

    # Guardar los datos en MongoDB
    mongo.db.temperature_data.insert_one(data_entry)

    # Escribir los datos en datos.txt
    with open("datos.txt", "a") as file:
        file.write(", ".join(data_for_txt) + "\n")

    return jsonify({"message": "Data received and saved."})







@app.route("/get_data")
def get_data():
  # Consulta los datos de temperatura desde la base de datos
    temperature_data = mongo.db.temperature_data.find()
    
    # Convierte los resultados de la consulta en una lista de diccionarios
    data = []
    for entry in temperature_data:
        data_point = {
            "time": entry["time"],  # Asegúrate de que tus documentos tengan un campo 'time'
            "temperature": entry["temperature"],  # Asegúrate de que tus documentos tengan un campo 'temperature'
        }
        data.append(data_point)

    # Devuelve los datos en formato JSON
    return jsonify(data)




@app.route("/base_de_datos")
def base_de_datos():
    # Consulta todos los registros de temperatura en MongoDB
    temperature_records = mongo.db.temperature_data.find()

    # Convertir los registros en una lista para poder pasarlos al template
    data_list = list(temperature_records)

    return render_template("base_de_datos.html", data=data_list)


@app.route("/Gemelo_digital")
def gemelo_digital():
    return render_template("Gemelo_digital.html")

@app.route("/faq")
def faq():
    return render_template("faq.html")


@app.route('/contact', methods=['GET', 'POST'])
def contact():
    form = ContactForm()

    if request.method == 'POST':
        if form.validate_on_submit():
            # Creando un 'documento' con los datos del formulario
            contacto = {
                "nombre": form.nombre.data,
                "apellidos": form.apellidos.data,
                "email": form.email.data,
                "telefono": form.telefono.data,
                "asunto": form.asunto.data,
                "mensaje": form.mensaje.data
            }

            # Guardando el 'documento' en la colección 'contactos'
            mongo.db.contactos.insert_one(contacto)
            flash('Mensaje enviado correctamente')
            return redirect(url_for('contacto'))  # Redirecciona de nuevo al formulario de contacto.
        else:
            flash('Error en el formulario', 'danger')

    return render_template('contact.html', form=form)



@app.route("/reportes")
def reportes():
    return render_template("reportes.html")


# Ruta para manejar la creación de nuevos reportes
@app.route('/crear-reporte', methods=['POST'])
def crear_reporte():
    Usuario = request.form['Usuario']
    fecha_incidente = request.form['fecha-incidente']
    elemento = request.form['elemento']
    incidente = request.form['incidente']
    
    # Crear el nombre del archivo
    fecha_actual = datetime.now().strftime('%Y-%m-%d')
    archivo_nombre = f"{fecha_actual}_{Usuario.split()[-1]}.txt"
    
    # Generar y guardar el reporte
    with open(os.path.join('code', 'reportes', archivo_nombre), 'w') as archivo:
        archivo.write(f"Usuario: {Usuario}\n")
        archivo.write(f"Fecha del Incidente: {fecha_incidente}\n")
        archivo.write(f"Elemento Afectado: {elemento}\n")
        archivo.write(f"Incidente: {incidente}\n")
    
    return jsonify({'mensaje': 'Reporte creado con éxito'})

# Ruta para obtener la lista de reportes
@app.route('/obtener-reportes')
def obtener_reportes():
    reportes = os.listdir('reportes')
    return jsonify({'reportes': reportes})

# Ruta para obtener el contenido de un reporte específico
@app.route('/obtener-reporte/<nombre_archivo>')
def obtener_reporte(nombre_archivo):
    with open(os.path.join('reportes', nombre_archivo), 'r') as archivo:
        contenido = archivo.read()
    return jsonify({'contenido': contenido})




@app.route("/latest_data")
def latest_data():
    # Consulta el último registro en MongoDB que contenga tanto las temperaturas como el setpoint
    last_record = mongo.db.temperature_data.find().sort([('_id', -1)]).limit(1)
    
    data = list(last_record)
    if data:
        data = data[0]
        del data['_id']  # Eliminar el ID ya que no es serializable
    else:
        data = {}
    
    return jsonify(data)




@app.route("/latest_data_for_graph")
def latest_data_for_graph():
    # Obtener las últimas n entradas (por ejemplo, las últimas 10 entradas)
    n = 15
    recent_data = mongo.db.temperature_data.find().sort([('_id', -1)]).limit(n)
    
    label = []  # Para almacenar las etiquetas del eje X
    value1 = []  # Para almacenar los valores de temperatura del eje Y
    value2 = []
    value3 = []
    value4 = []
    value5 = []
    value6 = []
    value7 = []
    value0 = []


    
    # Extraer los datos de la consulta
    for entry in recent_data:
        label.append(entry["time"])  # Asumiendo que el campo "time" es una cadena que representa el tiempo
        value1.append(entry["sensor1"])
        value2.append(entry["sensor2"])
        value3.append(entry["sensor3"])
        value4.append(entry["sensor4"])
        value5.append(entry["sensor5"])
        value6.append(entry["sensor6"])
        value7.append(entry["sensor7"])
        value0.append(entry["setpoint"])
       
    
    # Invertir las listas para que los datos más antiguos estén primero
    label.reverse()
    value1.reverse()
    value2.reverse()
    value3.reverse()
    value4.reverse()
    value5.reverse()
    value6.reverse()
    value7.reverse()
    value0.reverse()
    ()


    return jsonify({"label": label, "value1": value1, "value2": value2, "value3": value3, "value4": value4, "value5": value5, "value6": value6, "value7": value7, "value0": value0})




@app.route("/update_setpoint", methods=["POST"])
def update_setpoint():
    global current_setpoint  # Acceder a la variable global
    try:
        setpoint = float(request.form.get("setpoint"))
        current_setpoint = round(setpoint, 2)
        
        # Envía el setpoint a la Raspberry Pi:
        response = requests.post("http://192.168.100.206:8080/receive_setpoint", data={"setpoint": current_setpoint})
        
        if response.status_code == 200:
            return jsonify({"message": "Setpoint updated and sent to Raspberry Pi successfully."})
        else:
            return jsonify({"message": "Failed to send setpoint to Raspberry Pi.", "error": response.text}), 500
    except Exception as e:
        return jsonify({"message": "An error occurred.", "error": str(e)}), 400


#############################################################################
#############################################################################
#############################################################################